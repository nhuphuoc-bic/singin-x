"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/image-demo",{

/***/ "./contexts/ImageCacheContext.tsx":
/*!****************************************!*\
  !*** ./contexts/ImageCacheContext.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageCacheProvider: function() { return /* binding */ ImageCacheProvider; },\n/* harmony export */   useImageCache: function() { return /* binding */ useImageCache; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/indexedDB */ \"./utils/indexedDB.ts\");\n/* harmony import */ var _utils_mockImage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/mockImage */ \"./utils/mockImage.ts\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst ImageCacheContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst ImageCacheProvider = (param)=>{\n    let { children, maxCacheSize = 50, cacheExpiryMs = 5 * 60 * 1000 // 5 minutes\n     } = param;\n    _s();\n    const [cache, setCache] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const pendingRequests = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const cacheRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Keep cacheRef in sync with cache state\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        cacheRef.current = cache;\n    }, [\n        cache\n    ]);\n    const cleanupExpiredItems = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        const now = Date.now();\n        setCache((prevCache)=>{\n            const newCache = new Map(prevCache);\n            const entries = Array.from(newCache.entries());\n            for (const [key, item] of entries){\n                if (now - item.timestamp > cacheExpiryMs) {\n                    URL.revokeObjectURL(item.objectUrl);\n                    newCache.delete(key);\n                }\n            }\n            return newCache;\n        });\n        // Also cleanup IndexedDB\n        try {\n            await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].cleanupExpired(cacheExpiryMs);\n        } catch (error) {\n            console.warn(\"Failed to cleanup IndexedDB:\", error);\n        }\n    }, [\n        cacheExpiryMs\n    ]);\n    const getImage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (imageId)=>{\n        // Check if we have a cached version using ref to avoid dependency\n        const cachedItem = cacheRef.current.get(imageId);\n        if (cachedItem) {\n            const now = Date.now();\n            if (now - cachedItem.timestamp < cacheExpiryMs) {\n                return cachedItem.objectUrl;\n            } else {\n                // Remove expired item\n                URL.revokeObjectURL(cachedItem.objectUrl);\n                setCache((prev)=>{\n                    const newCache = new Map(prev);\n                    newCache.delete(imageId);\n                    return newCache;\n                });\n            }\n        }\n        // Check if there's already a pending request for this imageId\n        const pendingRequest = pendingRequests.current.get(imageId);\n        if (pendingRequest) {\n            return pendingRequest;\n        }\n        // Create new request\n        const requestPromise = (async ()=>{\n            try {\n                // First, try to get from IndexedDB\n                const dbCachedImage = await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getImage(imageId);\n                if (dbCachedImage) {\n                    const now = Date.now();\n                    if (now - dbCachedImage.timestamp < cacheExpiryMs) {\n                        // Create object URL from IndexedDB blob\n                        const objectUrl = URL.createObjectURL(dbCachedImage.blob);\n                        // Add to memory cache\n                        setCache((prev)=>{\n                            const newCache = new Map(prev);\n                            newCache.set(imageId, {\n                                blob: dbCachedImage.blob,\n                                objectUrl,\n                                timestamp: dbCachedImage.timestamp\n                            });\n                            return newCache;\n                        });\n                        return objectUrl;\n                    } else {\n                        // Remove expired item from IndexedDB\n                        await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].removeImage(imageId);\n                    }\n                }\n                // If not in IndexedDB or expired, fetch from API\n                console.log(\"fetching image\", imageId);\n                const requestTimestamp = Date.now();\n                // Retry logic for network issues\n                let lastError;\n                for(let attempt = 1; attempt <= 3; attempt++){\n                    try {\n                        console.log(\"Attempt \".concat(attempt, \" to fetch image\"));\n                        const response = await fetch(\"http://localhost:3008/public/me/ekyc/image/\".concat(imageId, \"?t=\").concat(requestTimestamp), {\n                            method: \"GET\",\n                            headers: {\n                                \"Accept\": \"image/*\",\n                                \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                                \"Pragma\": \"no-cache\",\n                                \"Expires\": \"0\"\n                            }\n                        });\n                        console.log(\"Response status:\", response.status, response.statusText);\n                        console.log(\"Response headers:\", Object.fromEntries(response.headers.entries()));\n                        // Check if response is actually an image\n                        const contentType = response.headers.get(\"content-type\");\n                        console.log(\"Content-Type:\", contentType);\n                        if (!contentType || !contentType.startsWith(\"image/\")) {\n                            console.warn(\"Response is not an image, content-type:\", contentType);\n                            // Try to read as text to see what we actually got\n                            const textResponse = await response.text();\n                            console.error(\"Response body (first 200 chars):\", textResponse.substring(0, 200));\n                            throw new Error(\"Server returned non-image content: \".concat(contentType));\n                        }\n                        if (!response.ok) {\n                            // If backend is not available, try to create a mock image for testing\n                            if (response.status === 404 || response.status === 400) {\n                                console.log(\"Backend returned error, creating mock image for testing\");\n                                const mockBlob = await (0,_utils_mockImage__WEBPACK_IMPORTED_MODULE_3__.createMockImage)(400, 300, \"Mock: \".concat(imageId));\n                                const objectUrl = URL.createObjectURL(mockBlob);\n                                const timestamp = Date.now();\n                                // Add to memory cache\n                                setCache((prev)=>{\n                                    const newCache = new Map(prev);\n                                    newCache.set(imageId, {\n                                        blob: mockBlob,\n                                        objectUrl,\n                                        timestamp\n                                    });\n                                    return newCache;\n                                });\n                                return objectUrl;\n                            }\n                            throw new Error(\"Failed to load image: \".concat(response.status, \" \").concat(response.statusText));\n                        }\n                        const blob = await response.blob();\n                        console.log(\"Blob created:\", {\n                            size: blob.size,\n                            type: blob.type\n                        });\n                        // Validate that we have a valid image blob\n                        if (!blob.type.startsWith(\"image/\")) {\n                            console.warn(\"Blob is not an image type:\", blob.type);\n                            throw new Error(\"Invalid image type: \".concat(blob.type));\n                        }\n                        if (blob.size === 0) {\n                            console.warn(\"Blob is empty\");\n                            throw new Error(\"Empty image data\");\n                        }\n                        // Test if blob can be read as image\n                        try {\n                            const testUrl = URL.createObjectURL(blob);\n                            const testImg = new Image();\n                            await new Promise((resolve, reject)=>{\n                                testImg.onload = ()=>{\n                                    console.log(\"Blob validation successful:\", {\n                                        width: testImg.width,\n                                        height: testImg.height\n                                    });\n                                    URL.revokeObjectURL(testUrl);\n                                    resolve(true);\n                                };\n                                testImg.onerror = ()=>{\n                                    console.error(\"Blob validation failed - not a valid image\");\n                                    URL.revokeObjectURL(testUrl);\n                                    reject(new Error(\"Blob is not a valid image\"));\n                                };\n                                testImg.src = testUrl;\n                            });\n                        } catch (error) {\n                            console.error(\"Blob validation error:\", error);\n                            throw new Error(\"Invalid image data from server\");\n                        }\n                        const objectUrl = URL.createObjectURL(blob);\n                        console.log(\"Object URL created:\", objectUrl);\n                        const timestamp = Date.now();\n                        // Add to memory cache\n                        setCache((prev)=>{\n                            const newCache = new Map(prev);\n                            // Remove oldest items if cache is full\n                            if (newCache.size >= maxCacheSize) {\n                                const oldestKey = newCache.keys().next().value;\n                                const oldestItem = newCache.get(oldestKey);\n                                if (oldestItem) {\n                                    URL.revokeObjectURL(oldestItem.objectUrl);\n                                    newCache.delete(oldestKey);\n                                }\n                            }\n                            newCache.set(imageId, {\n                                blob,\n                                objectUrl,\n                                timestamp\n                            });\n                            return newCache;\n                        });\n                        // Also save to IndexedDB for persistence\n                        try {\n                            await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].setImage(imageId, blob, timestamp);\n                        } catch (error) {\n                            console.warn(\"Failed to save to IndexedDB:\", error);\n                        }\n                        return objectUrl;\n                    } catch (error) {\n                        lastError = error;\n                        console.warn(\"Attempt \".concat(attempt, \" failed:\"), error.message);\n                        if (attempt < 3) {\n                            // Wait before retry\n                            await new Promise((resolve)=>setTimeout(resolve, 1000 * attempt));\n                        }\n                    }\n                }\n                // All attempts failed\n                console.error(\"All fetch attempts failed:\", lastError);\n                throw lastError;\n            } finally{\n                // Remove from pending requests\n                pendingRequests.current.delete(imageId);\n            }\n        })();\n        // Store pending request\n        pendingRequests.current.set(imageId, requestPromise);\n        return requestPromise;\n    }, [\n        cacheExpiryMs,\n        maxCacheSize\n    ]); // Removed cache from dependencies\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        // Clean up all object URLs\n        const items = Array.from(cache.values());\n        for (const item of items){\n            URL.revokeObjectURL(item.objectUrl);\n        }\n        setCache(new Map());\n        // Also clear pending requests\n        pendingRequests.current.clear();\n        // Clear IndexedDB\n        try {\n            await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearAll();\n        } catch (error) {\n            console.warn(\"Failed to clear IndexedDB:\", error);\n        }\n    }, []); // Removed cache dependency\n    const removeFromCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (imageId)=>{\n        const item = cache.get(imageId);\n        if (item) {\n            URL.revokeObjectURL(item.objectUrl);\n            setCache((prev)=>{\n                const newCache = new Map(prev);\n                newCache.delete(imageId);\n                return newCache;\n            });\n        }\n        // Also remove from IndexedDB\n        try {\n            await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].removeImage(imageId);\n        } catch (error) {\n            console.warn(\"Failed to remove from IndexedDB:\", error);\n        }\n    }, []); // Removed cache dependency\n    const getCacheStats = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        try {\n            return await _utils_indexedDB__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getCacheStats();\n        } catch (error) {\n            console.warn(\"Failed to get cache stats:\", error);\n            return {\n                count: 0,\n                totalSize: 0\n            };\n        }\n    }, []);\n    // Cleanup expired items periodically\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        const interval = setInterval(cleanupExpiredItems, 60000); // Check every minute\n        return ()=>clearInterval(interval);\n    }, [\n        cleanupExpiredItems\n    ]);\n    // Cleanup on unmount\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        return ()=>{\n            clearCache();\n        };\n    }, [\n        clearCache\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ImageCacheContext.Provider, {\n        value: {\n            getImage,\n            clearCache,\n            removeFromCache,\n            getCacheStats\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/nhuphuoc/Workspace/Tool/signinx/contexts/ImageCacheContext.tsx\",\n        lineNumber: 336,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ImageCacheProvider, \"WS6kNzq6/7ID0g6n+QFjWVIYGMw=\");\n_c = ImageCacheProvider;\nconst useImageCache = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ImageCacheContext);\n    if (!context) {\n        throw new Error(\"useImageCache must be used within an ImageCacheProvider\");\n    }\n    return context;\n};\n_s1(useImageCache, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ImageCacheProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./contexts/ImageCacheContext.tsx\n"));

/***/ })

});